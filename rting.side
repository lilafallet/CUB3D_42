Binary file sources/graphical/.draw.c.swp matches
Binary file sources/graphical/.raycasting.c.swp matches
sources/graphical/raycasting.c:	gr->rting.camerax = 2 * x / (double)map->recup.resolution[AXE_X] - 1;
sources/graphical/raycasting.c:	gr->rting.raydirx = gr->rting.dirx + gr->rting.planecamx
sources/graphical/raycasting.c:							* gr->rting.camerax;
sources/graphical/raycasting.c:	gr->rting.raydiry = gr->rting.diry + gr->rting.planecamy
sources/graphical/raycasting.c:							* gr->rting.camerax;
sources/graphical/raycasting.c:	gr->rting.mapx = (int)gr->rting.posx;
sources/graphical/raycasting.c:	gr->rting.mapy = (int)gr->rting.posy;
sources/graphical/raycasting.c:	gr->rting.deltadistx = fabs(1 / gr->rting.raydirx);
sources/graphical/raycasting.c:	gr->rting.deltadisty = fabs(1 / gr->rting.raydiry);
sources/graphical/raycasting.c:	if (gr->rting.raydirx < 0) //si le rayon est a gauche
sources/graphical/raycasting.c:		gr->rting.stepx = -1; //on se decale a gauche
sources/graphical/raycasting.c:		gr->rting.distx = (gr->rting.posx - gr->rting.mapx)
sources/graphical/raycasting.c:							* gr->rting.deltadistx;
sources/graphical/raycasting.c:		gr->rting.stepx = 1; //on se decale a droite
sources/graphical/raycasting.c:		gr->rting.distx = (gr->rting.mapx + 1.0 - gr->rting.posx)
sources/graphical/raycasting.c:							* gr->rting.deltadistx;
sources/graphical/raycasting.c:	if (gr->rting.raydiry < 0)
sources/graphical/raycasting.c:		gr->rting.stepy = -1; //on se decale en haut
sources/graphical/raycasting.c:		gr->rting.disty = (gr->rting.posy - gr->rting.mapy)
sources/graphical/raycasting.c:							* gr->rting.deltadisty;
sources/graphical/raycasting.c:		gr->rting.stepy = 1; //on se decale en bas
sources/graphical/raycasting.c:		gr->rting.disty = (gr->rting.mapy + 1.0 - gr->rting.posy)
sources/graphical/raycasting.c:							* gr->rting.deltadisty;
sources/graphical/raycasting.c:	gr->rting.hit = 0;
sources/graphical/raycasting.c:	while (gr->rting.hit == 0) //tant qu'on a pas tappe de mur
sources/graphical/raycasting.c:		if (gr->rting.distx < gr->rting.disty)
sources/graphical/raycasting.c:			gr->rting.distx += gr->rting.deltadistx; /*on ajoute la distance du
sources/graphical/raycasting.c:			gr->rting.mapx += gr->rting.stepx; /*on ajoute au carre actuel ou
sources/graphical/raycasting.c:			gr->rting.side = 0; //WE & EA
sources/graphical/raycasting.c:			gr->rting.disty += gr->rting.deltadisty;
sources/graphical/raycasting.c:			gr->rting.mapy += gr->rting.stepy;
sources/graphical/raycasting.c:			gr->rting.side = 1; //NO & SO
sources/graphical/raycasting.c:		if (map->recup.tab_map[gr->rting.mapy][gr->rting.mapx] == 1)
sources/graphical/raycasting.c:			gr->rting.hit = 1;
sources/graphical/raycasting.c:	gr->draw.height_line = (int)(map->recup.resolution[AXE_Y]
sources/graphical/raycasting.c:			/ gr->rting.perpwalldist); /*la hauteur du mur == resolution sur y
sources/graphical/raycasting.c:	gr->draw.start = -gr->draw.height_line / 2
sources/graphical/raycasting.c:	if (gr->draw.start < 0)
sources/graphical/raycasting.c:		gr->draw.start = 0;
sources/graphical/raycasting.c:	gr->draw.end = gr->draw.height_line / 2
sources/graphical/raycasting.c:	if (gr->draw.end >= map->recup.resolution[AXE_Y])
sources/graphical/raycasting.c:		gr->draw.end = map->recup.resolution[AXE_Y] - 1;
sources/graphical/raycasting.c:		if (gr->rting.side == 0)
sources/graphical/raycasting.c:			gr->rting.perpwalldist = (gr->rting.mapx - gr->rting.posx
sources/graphical/raycasting.c:					+ (1 - gr->rting.stepx) / 2) / gr->rting.raydirx;
sources/graphical/raycasting.c:			gr->rting.perpwalldist = (gr->rting.mapy - gr->rting.posy
sources/graphical/raycasting.c:					+ (1 - gr->rting.stepy) / 2) / gr->rting.raydiry;
sources/graphical/textures.c:	if (gr->rting.side == 0 && gr->rting.raydirx > 0)
sources/graphical/textures.c:	else if (gr->rting.side == 0 && gr->rting.raydirx < 0)
sources/graphical/textures.c:	else if (gr->rting.side == 1 && gr->rting.raydiry < 0)
sources/graphical/textures.c:		gr->text.img[i] = mlx_xpm_file_to_image
sources/graphical/textures.c:								(gr->win.mlx_ptr, map->recup.str_texture[i],
sources/graphical/textures.c:		gr->text.size[i][WIDTH] = w;
sources/graphical/textures.c:		gr->text.size[i][HEIGHT] = h;
sources/graphical/textures.c:		/*ft_printf("ptr = %p : size[%d][WIDTH] = %d\n", gr->img[i],
sources/graphical/textures.c:					i, gr->size[i][WIDTH]); */
sources/graphical/textures.c:		/*ft_printf("ptr = %p : size[%d][HEIGHT] = %d\n", gr->img[i],
sources/graphical/textures.c:					i, gr->size[i][HEIGHT]); */
sources/graphical/textures.c:		gr->text.data[i] = (int *)mlx_get_data_addr(gr->text.img[i],
sources/graphical/textures.c:								&gr->text.bits[i], &gr->text.size_line[i],
sources/graphical/textures.c:								&gr->win.endian);
sources/graphical/textures.c:		/*ft_printf("gr->data[%d] = %p\n", i, gr->data[i]); //
sources/graphical/textures.c:		ft_printf("gr->img[%d] = %p\n", i, gr->img[i]); //
sources/graphical/textures.c:		ft_printf("bits = %d\n", gr->recup.bits); //
sources/graphical/textures.c:		ft_printf("size_line = %d\n", gr->recup.size_line); //
sources/graphical/textures.c:		ft_printf("endian = %d\n\n", gr->recup.endian);*/
sources/graphical/init.c:	gr->win.mlx_ptr = mlx_init();
sources/graphical/init.c:	gr->win.win_ptr = mlx_new_window(gr->win.mlx_ptr,
sources/graphical/init.c:	gr->win.img_ptr = mlx_new_image(gr->win.mlx_ptr,
sources/graphical/init.c:	gr->win.data = (int *)mlx_get_data_addr(gr->win.img_ptr, &gr->win.bits,
sources/graphical/init.c:												&gr->win.size_line,
sources/graphical/init.c:												&gr->win.endian);
sources/graphical/init.c:	mlx_put_image_to_window(gr->win.mlx_ptr, gr->win.win_ptr, gr->win.img_ptr,
sources/graphical/init.c:	mlx_destroy_image(gr->win.mlx_ptr, gr->win.img_ptr);
sources/graphical/init.c:	mlx_loop(gr->win.mlx_ptr);
sources/graphical/init.c:	gr->rting.posx = (double)map->recup.posx + (double)0.5;
sources/graphical/init.c:	gr->rting.posy = (double)map->recup.posy + (double)0.5;
sources/graphical/draw.c:	if (gr->rting.side == 0)
sources/graphical/draw.c:			gr->text.wallhit = gr->rting.posy + gr->rting.perpwalldist
sources/graphical/draw.c:								* gr->rting.raydiry;
sources/graphical/draw.c:			gr->text.wallhit = gr->rting.posx + gr->rting.perpwalldist
sources/graphical/draw.c:								* gr->rting.raydirx;
sources/graphical/draw.c:	gr->text.wallhit -= floor(gr->text.wallhit); /*la fonction floor permet de
sources/graphical/draw.c:	gr->text.texx = gr->text.wallhit * (double)gr->text.size[who][WIDTH];
sources/graphical/draw.c:	y = gr->draw.start;
sources/graphical/draw.c:	//if (gr->rting.side == 0 && gr->rting.raydirx > 0)
sources/graphical/draw.c:	//	gr->text.texx = gr->text.size[who][WIDTH] - gr->text.texx - 1;
sources/graphical/draw.c:	//if (gr->rting.side == 1 && gr->rting.raydirx < 0)
sources/graphical/draw.c:	//	gr->text.texx = gr->text.size[who][WIDTH] - gr->text.texx - 1;
sources/graphical/draw.c:	while (y < gr->draw.end)
sources/graphical/draw.c:		gr->text.texy = (y - map->recup.resolution[AXE_Y] / 2
sources/graphical/draw.c:							+ gr->draw.height_line / 2)
sources/graphical/draw.c:							* gr->text.size[who][HEIGHT] / gr->draw.height_line;
sources/graphical/draw.c:		if (gr->text.texy < 0)
sources/graphical/draw.c:		gr->win.data[x + y * (gr->win.size_line / 4)] =
sources/graphical/draw.c:						gr->text.data[who][gr->text.texx + gr->text.texy
sources/graphical/draw.c:						* gr->text.size[who][WIDTH]];
sources/graphical/draw.c:	while (y >= gr->draw.end) /*colorise les pixels en montant sur y (jusqu'a
sources/graphical/draw.c:		gr->win.data[y * map->recup.resolution[AXE_X] + x] = floor_color;
sources/graphical/draw.c:	while (y < gr->draw.start) /*colorise les pixels en descendant sur y
sources/graphical/draw.c:		gr->win.data[y * map->recup.resolution[AXE_X] + x] = sky_color;
sources/graphical/draw.c:	gr->color.south = 0x0066CC; //BLUE
sources/graphical/draw.c:	gr->color.north = 0x990000; //RED
sources/graphical/draw.c:	gr->color.east = 0xFFD700; //YELLOW
sources/graphical/draw.c:	gr->color.west = 0x009900; //GREEN
sources/graphical/draw.c:	if (gr->rting.side == 0 && gr->rting.raydirx > 0)
sources/graphical/draw.c:		gr->color.wall = gr->color.north; //ombre
sources/graphical/draw.c:	else if (gr->rting.side == 0 && gr->rting.raydirx < 0)
sources/graphical/draw.c:		gr->color.wall = gr->color.south;	//ombre
sources/graphical/draw.c:	else if (gr->rting.side == 1 && gr->rting.raydiry > 0)
sources/graphical/draw.c:		gr->color.wall = gr->color.east;	//ombre
sources/graphical/draw.c:		gr->color.wall = gr->color.west;	//ombre
sources/graphical/utils.c:		gr->rting.diry = -1;
sources/graphical/utils.c:		gr->rting.diry = 1;
sources/graphical/utils.c:		gr->rting.dirx = -1;
sources/graphical/utils.c:		gr->rting.dirx = 1;
sources/graphical/utils.c:		gr->rting.planecamx = 0.66;
sources/graphical/utils.c:		gr->rting.planecamx = -0.66;
sources/graphical/utils.c:		gr->rting.planecamy = -0.66;
sources/graphical/utils.c:		gr->rting.planecamy = 0.66;
